#!/bin/bash

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# importing common functions
source ${SCRIPT_DIR}/common_functions/command_available.sh
source ${SCRIPT_DIR}/common_functions/jira.sh
source ${SCRIPT_DIR}/common_functions/git_helper.sh


function help() {
  echo \
"Creates a new branch based on the jira ticket we give.

Usage:
  ./new_task [-d | -m] [-p <prefix>] [-j <jira_ticket_numer>] [-f] [-h]
  ./new_task [--develop | --master] [--prefix <prefix>] [--jira <jira_ticket_number>] [--force] [-h]

If neither develop nor master is set, then it will create the new branch from the currently checked out branch.
The default branchname is <prefix>/SEON-<ticketnumber>-jira-summary-lowercased, which can be changed 
during the creation process.

OPTIONS:
  -d, --develop: set base branch to 'develop'
  -m, --master: set base branch to 'master'
  -p, --prefix: set prefix of the branch. If not set, then the prefix is based on the Jira ticket type.
  -j, --jira: jira ticket number. If set, then the script will not ask for it. 
              The script will try to extract the ticket number, so we can use the full url, or the SEON-<ticketnumber> format too.
  -f, --force: Do not ask for the branch name override, just use the given jira ticket number.
  -h, --help: show this help
"

}
function parse_arguments() {
  # Long option parsing (portable, supports --option and --option=value)
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d|--develop)
        BASE_BRANCH="develop"; shift ;;
      -m|--master)
        BASE_BRANCH="master"; shift ;;
      -p|--prefix)
        prefix="$2"; shift 2 ;;
      -j|--jira)
        JIRA="$2"; shift 2 ;;
      -h|--help)
        help; exit 0 ;;
      --)
        shift; break ;;
      -*)
        echo "Unknown option: $1"; exit 1 ;;
      *)
        break ;;
    esac
  done

  WORK_ITEM=$(get_work_item "${JIRA}")
  echo "Using work item ${WORK_ITEM}"
}


parse_arguments "$@"

env_var_set JIRA_API_USER
env_var_set JIRA_API_KEY

check_command_available git
check_command_available curl
check_command_available jq

TYPE=$(get_type "${WORK_ITEM}")
SUMMARY=$(get_summary "${WORK_ITEM}")

case "${TYPE}" in
  "Epic")
    PREFIX="epic"
    ;;
  "Bug-task" | "Bug" | "Hotfix")
    PREFIX="bugfix"
    ;;
  "New Feature" | "Sub-task" | "Task" | "Improvement")
    PREFIX="feature"
    ;;
  *)
    PREFIX="unknown"
    ;;
esac

if [ -n "${prefix}" ];then
  echo "prefix parameter is set. Creating with \"${prefix}\" prefix."
  PREFIX=${prefix}
fi

BRANCH="$PREFIX/${WORK_ITEM}-${SUMMARY}"

BRANCH=$(standardize_branchname "${BRANCH}")

if [[ -n "${BASE_BRANCH}" ]]; then
  echo "Base branch is set, checking out \"${BASE_BRANCH}\" "
  git checkout "${BASE_BRANCH}"
  git pull
else
  echo "Base branch is not set. Creating from current branch: $(git branch --show-current)"
fi

git checkout -b "${BRANCH}"
